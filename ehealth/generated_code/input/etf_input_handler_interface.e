note
	description: "Input Handler"
	author: ""
	date: "$Date$"
	revision: "$Revision$"

deferred class
	ETF_INPUT_HANDLER_INTERFACE
inherit
	ETF_TYPE_CONSTRAINTS

feature {NONE}

	make_without_running(input: STRING; a_commands: ETF_ABSTRACT_UI_INTERFACE)
			-- convert an input string into array of commands
	  	do
	  		create on_error
		  	input_string := input
		  	abstract_ui  := a_commands
	  	end

	make(input: STRING; a_commands: ETF_ABSTRACT_UI_INTERFACE)
			-- convert an input string into array of commands
	  	do
	  		make_without_running(input, a_commands)
			parse_and_validate_input_string
	  	end

feature -- auxiliary queries

	etf_evt_out (evt: TUPLE[name: STRING; args: ARRAY[ETF_EVT_ARG]]): STRING
		local
			i: INTEGER
			name: STRING
			args: ARRAY[ETF_EVT_ARG]
		do
			name := evt.name
			args := evt.args
			create Result.make_empty
			Result.append (name + "(")
			from
				i := args.lower
			until
				i > args.upper
			loop
				if args[i].src_out.is_empty then
					Result.append (args[i].out)
				else
					Result.append (args[i].src_out)
				end
				if i < args.upper then
					Result.append (", ")
				end
				i := i + 1
			end
			Result.append (")")
		end

feature -- attributes

	error: BOOLEAN

	input_string: STRING -- list of commands to execute

	abstract_ui: ETF_ABSTRACT_UI_INTERFACE
		-- output generated by `parse_string'

feature -- error reporting

	on_error: ETF_EVENT [TUPLE[STRING]]

feature -- error messages

	input_cmds_syntax_err_msg : STRING =
		"Syntax Error: specification of command executions cannot be parsed"

	input_cmds_type_err_msg : STRING =
		"Type Error: specification of command executions is not type-correct"

feature -- parsing

	parse_and_validate_input_string
	  local
		trace_parser : ETF_EVT_TRACE_PARSER
		cmd : ETF_COMMAND_INTERFACE
		invalid_cmds: STRING
	  do
		create trace_parser.make (evt_param_types_list, enum_items)
		trace_parser.parse_string (input_string)

	    if trace_parser.last_error.is_empty then
	  	  invalid_cmds := find_invalid_evt_trace (
		    	trace_parser.event_trace)
		  if invalid_cmds.is_empty then
		    across trace_parser.event_trace
		    as evt
		    loop
		      cmd := evt_to_cmd (evt.item)
		      abstract_ui.put (cmd)
		    end
		  else
		    error := TRUE
		    on_error.notify (
		  	  input_cmds_type_err_msg + "%N" + invalid_cmds)
		  end
	    else
	      error := TRUE
	      on_error.notify (
		    input_cmds_syntax_err_msg + "%N" + trace_parser.last_error)
	    end
	end

	evt_to_cmd (evt : TUPLE[name: STRING; args: ARRAY[ETF_EVT_ARG]]) : ETF_COMMAND_INTERFACE
		local
			cmd_name : STRING
			args : ARRAY[ETF_EVT_ARG]
			dummy_cmd : ETF_DUMMY
		do
			cmd_name := evt.name
			args := evt.args
			create dummy_cmd.make("dummy", [], abstract_ui)

			if cmd_name ~ "add_physician" then 
				 if attached {ETF_INT_ARG} args[1] as id and then TRUE and then attached {ETF_STR_ARG} args[2] as name and then TRUE and then attached {ETF_ENUM_INT_ARG} args[3] as kind and then (kind.value = generalist or else kind.value = specialist) then 
					 create {ETF_ADD_PHYSICIAN} Result.make ("add_physician", [id.value , name.value , kind.value], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_patient" then 
				 if attached {ETF_INT_ARG} args[1] as id and then TRUE and then attached {ETF_STR_ARG} args[2] as name and then TRUE then 
					 create {ETF_ADD_PATIENT} Result.make ("add_patient", [id.value , name.value], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_medication" then 
				 if attached {ETF_INT_ARG} args[1] as id and then TRUE and then (attached {ETF_TUPLE_ARG} args[2] as medicine) and then medicine.value.count = 4 and then (attached {ETF_STR_ARG} medicine.value[1] as medicine_name) and then (attached {ETF_ENUM_INT_ARG} medicine.value[2] as medicine_kind) and then (attached {ETF_VALUE_ARG} medicine.value[3] as medicine_low) and then (attached {ETF_VALUE_ARG} medicine.value[4] as medicine_hi) and then TRUE and then (medicine_kind.value = pill or else medicine_kind.value = liquid) and then TRUE and then TRUE then 
					 create {ETF_ADD_MEDICATION} Result.make ("add_medication", [id.value , [medicine_name.value, medicine_kind.value, create {VALUE}.make_from_string (medicine_low.src_out), create {VALUE}.make_from_string (medicine_hi.src_out)]], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_interaction" then 
				 if attached {ETF_INT_ARG} args[1] as id1 and then TRUE and then attached {ETF_INT_ARG} args[2] as id2 and then TRUE then 
					 create {ETF_ADD_INTERACTION} Result.make ("add_interaction", [id1.value , id2.value], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "new_prescription" then 
				 if attached {ETF_INT_ARG} args[1] as id and then TRUE and then attached {ETF_INT_ARG} args[2] as doctor and then TRUE and then attached {ETF_INT_ARG} args[3] as patient and then TRUE then 
					 create {ETF_NEW_PRESCRIPTION} Result.make ("new_prescription", [id.value , doctor.value , patient.value], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_medicine" then 
				 if attached {ETF_INT_ARG} args[1] as id and then TRUE and then attached {ETF_INT_ARG} args[2] as medicine and then TRUE and then attached {ETF_VALUE_ARG} args[3] as dose and then TRUE then 
					 create {ETF_ADD_MEDICINE} Result.make ("add_medicine", [id.value , medicine.value , create {VALUE}.make_from_string (dose.src_out)], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "remove_medicine" then 
				 if attached {ETF_INT_ARG} args[1] as id and then TRUE and then attached {ETF_INT_ARG} args[2] as medicine and then TRUE then 
					 create {ETF_REMOVE_MEDICINE} Result.make ("remove_medicine", [id.value , medicine.value], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "prescriptions_q" then 
				 if attached {ETF_INT_ARG} args[1] as medication_id and then TRUE then 
					 create {ETF_PRESCRIPTIONS_Q} Result.make ("prescriptions_q", [medication_id.value], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "dpr_q" then 
				 if TRUE then 
					 create {ETF_DPR_Q} Result.make ("dpr_q", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 
			else 
				 Result := dummy_cmd 
			end 
		end

	find_invalid_evt_trace (
		event_trace: ARRAY[TUPLE[name: STRING; args: ARRAY[ETF_EVT_ARG]]])
	: STRING
	local
		loop_counter: INTEGER
		evt: TUPLE[name: STRING; args: ARRAY[ETF_EVT_ARG]]
		cmd_name: STRING
		args: ARRAY[ETF_EVT_ARG]
		evt_out_str: STRING
	do
		create Result.make_empty
		from
			loop_counter := event_trace.lower
		until
			loop_counter > event_trace.upper
		loop
			evt := event_trace[loop_counter]
			evt_out_str := etf_evt_out (evt)

			cmd_name := evt.name
			args := evt.args

			if cmd_name ~ "add_physician" then 
				if NOT( ( args.count = 3 ) AND THEN attached {ETF_INT_ARG} args[1] as id and then TRUE and then attached {ETF_STR_ARG} args[2] as name and then TRUE and then attached {ETF_ENUM_INT_ARG} args[3] as kind and then (kind.value = generalist or else kind.value = specialist)) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_physician(id: ID_MD = INTEGER_64 ; name: NAME = STRING ; kind: PHYSICIAN_TYPE = {generalist, specialist})")
				end

			elseif cmd_name ~ "add_patient" then 
				if NOT( ( args.count = 2 ) AND THEN attached {ETF_INT_ARG} args[1] as id and then TRUE and then attached {ETF_STR_ARG} args[2] as name and then TRUE) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_patient(id: ID_PT = INTEGER_64 ; name: NAME = STRING)")
				end

			elseif cmd_name ~ "add_medication" then 
				if NOT( ( args.count = 2 ) AND THEN attached {ETF_INT_ARG} args[1] as id and then TRUE and then (attached {ETF_TUPLE_ARG} args[2] as medicine) and then medicine.value.count = 4 and then (attached {ETF_STR_ARG} medicine.value[1] as medicine_name) and then (attached {ETF_ENUM_INT_ARG} medicine.value[2] as medicine_kind) and then (attached {ETF_VALUE_ARG} medicine.value[3] as medicine_low) and then (attached {ETF_VALUE_ARG} medicine.value[4] as medicine_hi) and then TRUE and then (medicine_kind.value = pill or else medicine_kind.value = liquid) and then TRUE and then TRUE) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_medication(id: ID_MN = INTEGER_64 ; medicine: MEDICATION = TUPLE[name: NAME = STRING; kind: KIND = {pill, liquid}; low: VALUE; hi: VALUE])")
				end

			elseif cmd_name ~ "add_interaction" then 
				if NOT( ( args.count = 2 ) AND THEN attached {ETF_INT_ARG} args[1] as id1 and then TRUE and then attached {ETF_INT_ARG} args[2] as id2 and then TRUE) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_interaction(id1: ID_MN = INTEGER_64 ; id2: ID_MN = INTEGER_64)")
				end

			elseif cmd_name ~ "new_prescription" then 
				if NOT( ( args.count = 3 ) AND THEN attached {ETF_INT_ARG} args[1] as id and then TRUE and then attached {ETF_INT_ARG} args[2] as doctor and then TRUE and then attached {ETF_INT_ARG} args[3] as patient and then TRUE) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"new_prescription(id: ID_RX = INTEGER_64 ; doctor: ID_MD = INTEGER_64 ; patient: ID_PT = INTEGER_64)")
				end

			elseif cmd_name ~ "add_medicine" then 
				if NOT( ( args.count = 3 ) AND THEN attached {ETF_INT_ARG} args[1] as id and then TRUE and then attached {ETF_INT_ARG} args[2] as medicine and then TRUE and then attached {ETF_VALUE_ARG} args[3] as dose and then TRUE) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_medicine(id: ID_RX = INTEGER_64 ; medicine: ID_MN = INTEGER_64 ; dose: VALUE)")
				end

			elseif cmd_name ~ "remove_medicine" then 
				if NOT( ( args.count = 2 ) AND THEN attached {ETF_INT_ARG} args[1] as id and then TRUE and then attached {ETF_INT_ARG} args[2] as medicine and then TRUE) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"remove_medicine(id: ID_RX = INTEGER_64 ; medicine: ID_MN = INTEGER_64)")
				end

			elseif cmd_name ~ "prescriptions_q" then 
				if NOT( ( args.count = 1 ) AND THEN attached {ETF_INT_ARG} args[1] as medication_id and then TRUE) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"prescriptions_q(medication_id: ID_MN = INTEGER_64)")
				end

			elseif cmd_name ~ "dpr_q" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"dpr_q")
				end
			else
				if NOT Result.is_empty then
					Result.append ("%N")
				end
				Result.append ("Error: unknown event name " + cmd_name)
			end
			loop_counter := loop_counter + 1
		end
	end
end